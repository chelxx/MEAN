Assignment: Intro to MongoDB

1. Create a database called 'my_first_db'

> use my_first_db

2. Create students collection

> db.createCollection("students")

3. Each document you insert into this collection should have the following format: ({name: STRING, home_state: STRING, lucky_number: NUMBER, birthday: {month: NUMBER, day: NUMBER, year: NUMBER}})

AND

4. Create 5 students with the appropriate info.

> db.students.insert({name: "Chelsea", home_state: "Illinois", lucky_number: 23, birthday: {month: 12, day: 23, year: 1990}})

> db.students.insert({name: "Fabian", home_state: "Illinois", lucky_number: 9, birthday: {month: 3, day: 9, year: 1995}})

> db.students.insert({name: "Rick", home_state: "California", lucky_number: 69, birthday: {month: 5, day: 10, year: 1962}})

> db.students.insert({name: "Morty", home_state: "California", lucky_number: 69, birthday: {month: 7, day: 18, year: 2002}})

> db.students.insert({name: "Harrison", home_state: "Illinois", lucky_number: 23, birthday: {month: 7, day: 13, year: 1942}})

> Note: How do I use db.students.insertMany()?

5. Get all students.

> db.students.find().pretty()

6. Retrieve all students who are from California (San Jose Dojo) or Washington (Seattle Dojo).

> db.students.find({home_state: "California"}).pretty()

7. Get all students whose lucky number is:

	7.a. greater than 3

	> db.students.find({lucky_number: {$gt: 3}}).pretty()

	7.b. less than or equal to 10

	> db.students.find({lucky_number: {$lte: 10}}).pretty()

	7.c. between 1 and 9 (inclusive)

	> db.students.find({lucky_number: {$in: [1,2,3,4,5,6,7,8,9,10]}}).pretty()

8. Add a field to each student collection called 'interests' that is an ARRAY.  It should contain the following entries: 'coding', 'brunch', 'MongoDB'. Do this in ONE operation.

> db.students.update({}, {$set: {interests: ["coding", "brunch", "MongoDB"]}}, false, true)

9. Add some unique interests for each particular student into each of their interest arrays.

> db.students.update({name: "Chelsea"}, {$push: {interests: "sleeping"}}, false, true)

10. Add the interest 'taxes' into someone's interest array.

> db.students.update({name: "Harrison"}, {$push: {interests: "taxes"}}, false, true)

11. Remove the 'taxes' interest you just added.

> db.students.update({name: "Harrison"}, {$pop: {interests: 1}})

12. Remove all students who are from California (or Washington).

> db.students.remove({home_state: "California"})

13. Remove a student by name. 

> db.students.remove({name: "Fabian"})

14. Remove a student whose lucky number is greater than 5 (JUST ONE).

> db.students.remove({lucky_number: {$gte: 5}}, {justOne: true})

15. Add a field to each student collection called 'number_of_belts' and set it to 0.

> db.students.update({}, {$set: {number_of_belts: 0}}, false, true)

16. Increment this field by 1 for all students in Illinois (Chicago Dojo).

> db.students.update({home_state: "Illinois"}, {$inc: {belts_earned: 1}})

17. Rename the 'number_of_belts' field to 'belts_earned'.

> db.students.update({}, {$rename: {"number_of_belts": "belts_earned"}}, false, true)

18. Remove the 'lucky_number' field.

> db.students.update({}, {$unset: {lucky_number: ""}})

19. Add a 'updated_on' field, and set the value as the current date.

> db.students.update({}, {$set: {updated_on: new Date()}})